# Generated by Django 4.0.5 on 2022-08-25 03:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Buoy',
            fields=[
                ('buoy_id', models.IntegerField(help_text='Buoy ID', primary_key=True, serialize=False)),
                ('battery', models.FloatField(help_text='배터리 잔량', null=True)),
                ('owner', models.CharField(default='ODN', help_text='스마트부표 소유자', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(help_text='위도')),
                ('longitude', models.FloatField(help_text='경도')),
                ('buoy', models.ForeignKey(db_column='buoy_id', on_delete=django.db.models.deletion.PROTECT, related_name='location', to='buoy.buoy')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(default='SN-PODOC-', help_text='제품번호', max_length=50)),
                ('temperature', models.FloatField(help_text='℃ 수온', null=True)),
                ('oxygen_per', models.FloatField(help_text='% 용존산소', null=True)),
                ('oxygen_mpl', models.FloatField(help_text='mg/L 용존산소', null=True)),
                ('oxygen_ppm', models.FloatField(help_text='ppm 용존산소', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(default='SN-PPHRB-', help_text='제품번호', max_length=50)),
                ('temperature', models.FloatField(help_text='℃ 수온', null=True)),
                ('ph', models.FloatField(help_text='pH 수소이온농도', null=True)),
                ('redox', models.FloatField(help_text='mV 산화환원반응', null=True)),
                ('ph_meter', models.FloatField(help_text='mV 수소이온농도_미터', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(default='SN-PC4EB-', help_text='제품번호', max_length=50)),
                ('temperature', models.FloatField(help_text='℃ 수온', null=True)),
                ('conductivity', models.FloatField(help_text='μS/cm 전도도', null=True)),
                ('salinity', models.FloatField(help_text='ppt 염도', null=True)),
                ('tds', models.FloatField(help_text='ppm 용존 고용물', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(default='SN-TRIPA-', help_text='멀티 프로브 제품번호', max_length=50)),
                ('date', models.DateField(help_text='측정 일자')),
                ('time', models.TimeField(help_text='측정 시간')),
                ('crc', models.CharField(help_text='crc16-modbus', max_length=50, null=True)),
                ('location', models.ForeignKey(db_column='location_id', on_delete=django.db.models.deletion.CASCADE, related_name='measure', to='buoy.location')),
                ('sensor1', models.OneToOneField(db_column='sensor1_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor1', to='buoy.sensor1')),
                ('sensor2', models.OneToOneField(db_column='sensor2_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor2', to='buoy.sensor2')),
                ('sensor3', models.OneToOneField(db_column='sensor3_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor3', to='buoy.sensor3')),
            ],
            options={
                'ordering': ['-date', '-time'],
            },
        ),
    ]
